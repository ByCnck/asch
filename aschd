#!/bin/bash

readonly PROG_DIR=$(pwd)
readonly PID_FILE=$PROG_DIR/asch.pid
readonly IP_CHINA="118.190.156.105"
readonly IP_OTHER="www.asch.so/downloads"

function read_port() {
  echo `cat $PROG_DIR/config.json |grep '"port"'|head -n 1| awk -F "[:,]" '{print$2}'|tr -d ' '`
}

function is_running() {
  test -f $PID_FILE && ps -p $(cat $PID_FILE) > /dev/null
}

function status() {
  if is_running; then
    echo "Asch server is running"
  else
    echo "Asch server is not running"
  fi
}

function start() {
  if is_running; then
    echo "Asch server is already started"
  else
    rm -f $PROG_DIR/asch.pid
    node $PROG_DIR/app.js --base $PROG_DIR --daemon $@
  fi
}

function stop() {
  local pid
  if test -f $PID_FILE; then
    pid=$(cat $PID_FILE)
  fi
  if [ -n "$pid" ] && ps -p "$pid" > /dev/null; then
    kill $pid
    sleep 1
    i=1
    while ps -p $pid > /dev/null; do
      if [ $i == 5 ]; then
        kill -9 $pid
        echo "Asch server killed"
      fi
      echo "Still waiting for asch server to stop ..."
      sleep 1
      ((i++))
    done
    echo "Asch server stopped"
  else
    echo "Asch server is not running"
  fi
  rm -f $PID_FILE
}

function restart() {
  stop
  start
}

function ischina(){
	read -p "Is your server in China? Please input Y or N [default Y]:"  isChina
	isChina=${isChina:-"Y"}
	case $isChina in
	Y | y)
		ip=$IP_CHINA;;
	*)
		ip=$IP_OTHER;;
	esac
}

function rebuild() {
  ischina
  ismainnet
	var=$(curl -sL http://$ip/metadata_rebuild_$net.txt)

	snapshotName=$(echo $var| awk '{print $1}')
	snapshotDB=$(echo $var| awk '{print $2}')
	snapshotMd5=$(echo $var| awk '{print $3}')
	snapshotDate=$(echo $var| awk '{print $4}')
	snapshotHeight=$(echo $var| awk '{print $5}')
	snapshotSize=$(echo $var| awk '{print $6}')

	echo "snapshot info:"
	echo "snapshotName:"$snapshotName
	echo "snapshotMd5:"$snapshotMd5
	echo "snapshotDate:"$snapshotDate
	echo "snapshotHeight:"$snapshotHeight
	echo "snapshotSize:"$snapshotSize


	echo "Downloading blockchain snapshot..."
	wget "http://$ip/$snapshotName"
	newMd5=$(md5sum $snapshotName | awk '{print $1}')
	if [ i$newMd5 = i$snapshotMd5 ];then
		echo "Check md5 passed!"
	else
		echo "Check md5 failed,please run again!"
    exit
	fi

	./aschd stop
	tar zxf $snapshotName
	rm $snapshotName
	mv ./$snapshotDB ./blockchain.db
	./aschd start
}

function version() {
  node $PROG_DIR/app.js --version
}

function check_os() {
	os_num=`cat /etc/os-release | grep '\"Ubuntu\"'  | wc -l`
	if [ $os_num -ne 1 ];then
		echo "Linux is not Ubuntu, please configure manually!" && exit 1
	fi
}

function configure() {
  check_os
  sudo $PROG_DIR/init/install_deps.sh
  sudo $PROG_DIR/init/config_ntp.sh
  sudo $PROG_DIR/init/config_monitor.sh
}

function upgrade() {
  ischina
  ismainnet
	# echo $ip $net
	var=$(curl -sL http://$ip/metadata_upgrade_$net.txt)
	
	Name=$(echo $var| awk '{print $1}')
	Md5=$(echo $var| awk '{print $2}')
	Date=$(echo $var| awk '{print $3}')
	Version=$(echo $var| awk '{print $4}')
	Size=$(echo $var| awk '{print $5}')

	echo "Package info:"
	echo "Name: "$Name
	echo "Md5: "$Md5
	echo "Date: "$Date
	echo "Version: "$Version
	echo "Size: "$Size
	
	mkdir -p tmp
	wget "http://$ip/$Name" -O tmp/$Name
	newMd5=$(md5sum tmp/$Name | awk '{print $1}')
	if [ i$newMd5 = i$Md5 ];then
		echo "Check md5 passed!"
	else
		echo "Check md5 failed,please run again!"
		exit
	fi

	echo "Extracting new package ..."
	tar zxf tmp/$Name -C tmp/
	extractedDir=`find tmp -maxdepth 1 -type d | grep asch |head -n 1`
	currentVersion=`./aschd version`
	chmod u+x $extractedDir/aschd
	newVersion=`$extractedDir/aschd version`
	./aschd stop
	echo "Copying new files ..."
	for file in `ls $extractedDir`
	do
	  if [ "$file" != "config.json" -a "$file" != "blockchain.db" ]; then
		echo "copy $extractedDir/$file ..."
		cp -r $extractedDir/$file ./
	  fi
	done
	rm -rf $extractedDir tmp/$latestName
	echo "Upgrade to $newVersion done."
	./aschd start
}

function enable() {
  local secret="$@"
  local port=`read_port`
  curl -k -H "Content-Type: application/json" -X POST -d '{"secret":"'"$secret"'"}' localhost:$port/api/delegates/forging/enable
}

function ismainnet(){
	read -p "Is mainnet? Please input Y or N [default Y]:"  isMainnet
  isMainnet=${isMainnet:-"Y"}
	case $isMainnet in
	Y | y)
		net="mainnet";;
	*)
		net="testnet";;
	esac
}

function main() {
  export PATH=$PROG_DIR/bin:$PATH
  local cmdType=`type -t $1`
  if [ $cmdType == "function" ]; then
    eval $@
  else
    echo "Command not supported"
  fi
}

main $@
